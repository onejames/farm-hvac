; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
monitor_speed = 115200

# Suppress a specific warning coming from a third-party library (OneWire).
# This is the recommended way to handle library bugs without modifying their source.
build_flags = -Wno-extra-tokens

lib_deps =
    knolleary/PubSubClient
    me-no-dev/ESPAsyncWebServer
    paulstoffregen/OneWire
    milesburton/DallasTemperature
    openenergymonitor/EmonLib
    bblanchon/ArduinoJson

[env:native]
platform = native
# Add libraries here that are needed for native tests.
# ArduinoJson is a good example of a library that works natively.
lib_deps = bblanchon/ArduinoJson

# By default, PlatformIO does not build files from `src` for native tests.
# `test_build_src = yes` enables this feature.
test_build_src = yes

# We then use a filter to explicitly include ONLY the source files we need for testing.
build_src_filter = -<*> +<logic/data_analyzer.cpp> +<logic/json_builder.cpp> +<data_processing.cpp> +<network_manager.cpp>

# Add the 'src' directory to the include path so test files can find headers.
build_flags = -I src

# Ignore hardware-specific libraries during native testing to prevent build errors.
lib_ignore =
    ESPAsyncWebServer
    OneWire
    DallasTemperature
    EmonLib
    PubSubClient

# Ignore the end-to-end hardware tests when running native unit tests
test_ignore = test_e2e

[env:esp32_e2e_test]
platform = espressif32
board = esp32dev
framework = arduino
monitor_speed = 115200
lib_deps = ${env:esp32dev.lib_deps}
test_build_src = yes
build_src_filter = +<*> -<main.cpp>

# Only run tests from the test_e2e directory for this environment
test_filter = test_e2e
